{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1OFPsGj7Q_ho6DwW8MyINGxM1XNLyLhgf",
      "authorship_tag": "ABX9TyPzhRaiGnTxiQstsKIHOWE4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Assessment 3 - Comprehensive Analysis on Climate Data"
      ],
      "metadata": {
        "id": "JyVhvCiLXxy6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Part 1: SQL Database Setup and Queries.\n",
        "1.1 Database: SQL Query I\n",
        "\n",
        "    1. Import the downloaded dataset into a SQL database.\n",
        "    2. Write an SQL query to fetch `Year` and any relevant variables (e.g., `Number of natural disasters`, `Economic damage`).\n",
        "1.2 Database: SQL Query II\n",
        "\n",
        "    1. Write SQL query to show Total Natural Disaster and Economic Damage for every type of Disaster (Entity)\n",
        "    2. Write an SQL query to summarize the data per 10 year, calculating averages and sums for Natural disaster & Economic damage."
      ],
      "metadata": {
        "id": "zleo8KD5X9Vt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Part 2: Data Science and Statistical Analysis.\n",
        "Refer to the previous assignment framework for exercises on Descriptive and Inferential Statistics, EDA, and Statistical Modeling."
      ],
      "metadata": {
        "id": "2CgM1USHaWz3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Import Module"
      ],
      "metadata": {
        "id": "wI8I3QfiFCc_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error, r2_score"
      ],
      "metadata": {
        "id": "71Ny1u38E_xi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Import Dataset"
      ],
      "metadata": {
        "id": "Equ2WuahDYyc"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pRlCfTRelQZi"
      },
      "outputs": [],
      "source": [
        "dfDisasterDamage = pd.read_csv('/content/drive/MyDrive/Assessment 3 - Syifa Alzena Joyo/Part 1: SQL Database Setup and Queries./1.1 Database SQL Query I.csv', delimiter=',')\n",
        "dfEntity = pd.read_csv('/content/drive/MyDrive/Assessment 3 - Syifa Alzena Joyo/Part 1: SQL Database Setup and Queries./1.2 Database SQL Query II Nomor 1.csv', delimiter=',')\n",
        "dfDekade = pd.read_csv('/content/drive/MyDrive/Assessment 3 - Syifa Alzena Joyo/Part 1: SQL Database Setup and Queries./1.2 Database SQL Query II Nomor 2.csv', delimiter=',')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfDisasterDamage.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cBwH6snlBBwt",
        "outputId": "319f423e-4247-4362-8ba1-de5345d92c8d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 828 entries, 0 to 827\n",
            "Data columns (total 5 columns):\n",
            " #   Column                        Non-Null Count  Dtype  \n",
            "---  ------                        --------------  -----  \n",
            " 0   Entity                        828 non-null    object \n",
            " 1   Code                          0 non-null      float64\n",
            " 2   Year                          828 non-null    int64  \n",
            " 3   Number of Reported Disasters  828 non-null    int64  \n",
            " 4   Total Economic Damage         561 non-null    float64\n",
            "dtypes: float64(2), int64(2), object(1)\n",
            "memory usage: 32.5+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfEntity.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rvRtuYSpBv9G",
        "outputId": "3b9fd5a4-5d09-4dcc-b3fc-e3d35542d4d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 11 entries, 0 to 10\n",
            "Data columns (total 3 columns):\n",
            " #   Column                    Non-Null Count  Dtype \n",
            "---  ------                    --------------  ----- \n",
            " 0   Entity                    11 non-null     object\n",
            " 1   Total Reported Disasters  11 non-null     int64 \n",
            " 2   Total Economic Damage     11 non-null     int64 \n",
            "dtypes: int64(2), object(1)\n",
            "memory usage: 392.0+ bytes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfDekade.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aYMUp_k2By6j",
        "outputId": "b7f81845-07ce-46d4-dd82-c0b9e7f58cf9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 112 entries, 0 to 111\n",
            "Data columns (total 4 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   Type of Disaster       112 non-null    object \n",
            " 1   Start Year - End Year  112 non-null    object \n",
            " 2   Avg Natural Disasters  112 non-null    float64\n",
            " 3   Total Economic Damage  88 non-null     float64\n",
            "dtypes: float64(2), object(2)\n",
            "memory usage: 3.6+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Menghapus Duplikasi\n",
        "dfDisasterDamage.drop_duplicates(inplace=True)\n",
        "dfEntity.drop_duplicates(inplace=True)\n",
        "dfDekade.drop_duplicates(inplace=True)\n",
        "\n",
        "# Menghapus Kolom Code karena seluruh barisnya NaN\n",
        "dfDisasterDamage.drop(columns=['Code'], inplace=True)\n",
        "\n",
        "# Menghapus NaN Value\n",
        "dfDisasterDamage.dropna(inplace=True)\n",
        "dfEntity.dropna(inplace=True)\n",
        "dfDekade.dropna(inplace=True)\n",
        "\n",
        "# Memisahkan kolom dfDekade 'Start Year - End Year' menjadi 2 kolom\n",
        "dfDekade[['Start Year', 'End Year']] = dfDekade['Start Year - End Year'].str.split('-', expand=True)\n",
        "dfDekade.drop('Start Year - End Year', axis=1, inplace=True)\n",
        "dfDekade[['Start Year', 'End Year']] = dfDekade[['Start Year', 'End Year']].apply(pd.to_numeric)\n",
        "\n",
        "dfDekade = dfDekade[['Type of Disaster', 'Start Year', 'End Year', 'Avg Natural Disasters', 'Total Economic Damage']]"
      ],
      "metadata": {
        "id": "rmAIP9EI_CiH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Descriptive Statistics - Basic Measures:\n",
        "\n",
        "Compute the mean, median, and standard deviation using Pandas functions like mean(), median(), and std()."
      ],
      "metadata": {
        "id": "iji9NMdlKlC8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dfDisasterDamage.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "id": "s6kGvGTfFoJq",
        "outputId": "9a468b6a-b7dc-4b63-9935-3453c8cbd5ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Entity  Year  Number of Reported Disasters  \\\n",
              "0  All natural disasters  1900                             5   \n",
              "1  All natural disasters  1901                             2   \n",
              "2  All natural disasters  1902                             9   \n",
              "3  All natural disasters  1903                             8   \n",
              "4  All natural disasters  1904                             2   \n",
              "\n",
              "   Total Economic Damage  \n",
              "0             30000000.0  \n",
              "1                    0.0  \n",
              "2                    0.0  \n",
              "3            480000000.0  \n",
              "4                    0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-13071eac-3d37-416b-a1d4-354d17e4a8a0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Number of Reported Disasters</th>\n",
              "      <th>Total Economic Damage</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>All natural disasters</td>\n",
              "      <td>1900</td>\n",
              "      <td>5</td>\n",
              "      <td>30000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>All natural disasters</td>\n",
              "      <td>1901</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>All natural disasters</td>\n",
              "      <td>1902</td>\n",
              "      <td>9</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>All natural disasters</td>\n",
              "      <td>1903</td>\n",
              "      <td>8</td>\n",
              "      <td>480000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>All natural disasters</td>\n",
              "      <td>1904</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-13071eac-3d37-416b-a1d4-354d17e4a8a0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-13071eac-3d37-416b-a1d4-354d17e4a8a0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-13071eac-3d37-416b-a1d4-354d17e4a8a0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d147431a-6135-4008-8364-86a1ab497a33\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d147431a-6135-4008-8364-86a1ab497a33')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d147431a-6135-4008-8364-86a1ab497a33 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "statisticsDisasterDamage = dfDisasterDamage.describe().drop(\"Year\", axis=1)\n",
        "print(statisticsDisasterDamage)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BYKy9u4TKyy9",
        "outputId": "13f50343-e006-4fd6-9624-4176e1c1c184"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       Number of Reported Disasters  Total Economic Damage\n",
            "count                    561.000000           5.610000e+02\n",
            "mean                      45.620321           1.146966e+10\n",
            "std                       78.218834           3.199525e+10\n",
            "min                        1.000000           0.000000e+00\n",
            "25%                        6.000000           6.850000e+07\n",
            "50%                       15.000000           8.400000e+08\n",
            "75%                       40.000000           5.444777e+09\n",
            "max                      432.000000           3.640932e+11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfEntity.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "f3iXL2aKIO2V",
        "outputId": "0d68cf83-614c-4513-8b29-1513707ae84e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  Entity  Total Reported Disasters  Total Economic Damage\n",
              "0      Volcanic activity                       249             3933912000\n",
              "1                Drought                       727           166761974000\n",
              "2    Extreme temperature                       575            62866343000\n",
              "3  All natural disasters                     13212          3217239928000\n",
              "4    Mass movement (dry)                        57              211600000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5c52dd72-c5cd-488c-b37f-431cb8720eed\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Total Reported Disasters</th>\n",
              "      <th>Total Economic Damage</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Volcanic activity</td>\n",
              "      <td>249</td>\n",
              "      <td>3933912000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Drought</td>\n",
              "      <td>727</td>\n",
              "      <td>166761974000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Extreme temperature</td>\n",
              "      <td>575</td>\n",
              "      <td>62866343000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>All natural disasters</td>\n",
              "      <td>13212</td>\n",
              "      <td>3217239928000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Mass movement (dry)</td>\n",
              "      <td>57</td>\n",
              "      <td>211600000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c52dd72-c5cd-488c-b37f-431cb8720eed')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5c52dd72-c5cd-488c-b37f-431cb8720eed button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5c52dd72-c5cd-488c-b37f-431cb8720eed');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cce2b87a-9dff-458f-93d1-a3ac9023aaaf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cce2b87a-9dff-458f-93d1-a3ac9023aaaf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cce2b87a-9dff-458f-93d1-a3ac9023aaaf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "statisticsEntity = dfEntity[[\"Total Reported Disasters\", \"Total Economic Damage\"]].describe()\n",
        "print(statisticsEntity)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zL0zF361LRRZ",
        "outputId": "69efa032-6bdf-4287-b4cb-0df6842eb339"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       Total Reported Disasters  Total Economic Damage\n",
            "count                 11.000000           1.100000e+01\n",
            "mean                2402.181818           5.849527e+11\n",
            "std                 3952.601240           9.774600e+11\n",
            "min                    1.000000           3.300000e+07\n",
            "25%                  339.500000           7.209623e+09\n",
            "50%                  712.000000           8.823428e+10\n",
            "75%                 2750.500000           8.015568e+11\n",
            "max                13212.000000           3.217240e+12\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfDekade.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "id": "vlcLv5lGITPL",
        "outputId": "8f34e0a5-3c05-4893-de1f-ebf866ce7b94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Type of Disaster  Start Year  End Year  Avg Natural Disasters  \\\n",
              "0  All natural disasters        1900      1909                    6.7   \n",
              "1  All natural disasters        1910      1919                    6.4   \n",
              "2  All natural disasters        1920      1929                    8.7   \n",
              "3  All natural disasters        1930      1939                   10.0   \n",
              "4  All natural disasters        1940      1949                   13.7   \n",
              "\n",
              "   Total Economic Damage  \n",
              "0           1.306750e+09  \n",
              "1           6.000000e+08  \n",
              "2           1.019230e+09  \n",
              "3           3.347000e+09  \n",
              "4           3.008700e+09  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5120cf3b-6c1c-47e8-8849-1eb9d37d706e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Type of Disaster</th>\n",
              "      <th>Start Year</th>\n",
              "      <th>End Year</th>\n",
              "      <th>Avg Natural Disasters</th>\n",
              "      <th>Total Economic Damage</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>All natural disasters</td>\n",
              "      <td>1900</td>\n",
              "      <td>1909</td>\n",
              "      <td>6.7</td>\n",
              "      <td>1.306750e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>All natural disasters</td>\n",
              "      <td>1910</td>\n",
              "      <td>1919</td>\n",
              "      <td>6.4</td>\n",
              "      <td>6.000000e+08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>All natural disasters</td>\n",
              "      <td>1920</td>\n",
              "      <td>1929</td>\n",
              "      <td>8.7</td>\n",
              "      <td>1.019230e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>All natural disasters</td>\n",
              "      <td>1930</td>\n",
              "      <td>1939</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3.347000e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>All natural disasters</td>\n",
              "      <td>1940</td>\n",
              "      <td>1949</td>\n",
              "      <td>13.7</td>\n",
              "      <td>3.008700e+09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5120cf3b-6c1c-47e8-8849-1eb9d37d706e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5120cf3b-6c1c-47e8-8849-1eb9d37d706e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5120cf3b-6c1c-47e8-8849-1eb9d37d706e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-48f89f6f-b2b9-4218-9537-17ba70a3f03b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-48f89f6f-b2b9-4218-9537-17ba70a3f03b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-48f89f6f-b2b9-4218-9537-17ba70a3f03b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "statisticsDekade = dfDekade[[\"Avg Natural Disasters\", \"Total Economic Damage\"]].describe()\n",
        "print(statisticsDekade)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vBE2GUazMA0s",
        "outputId": "5c729dea-71cf-4071-fadf-1bdf5b6ffba4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       Avg Natural Disasters  Total Economic Damage\n",
            "count              88.000000           8.800000e+01\n",
            "mean               30.901818           7.311909e+10\n",
            "std                66.196849           2.042609e+11\n",
            "min                 1.000000           2.700000e+04\n",
            "25%                 2.975000           3.487825e+08\n",
            "50%                 7.050000           2.798696e+09\n",
            "75%                20.885000           2.268478e+10\n",
            "max               386.100000           1.354015e+12\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Exploratory Data Analysis (EDA) with Python - Univariate Analysis"
      ],
      "metadata": {
        "id": "s3USDJmIMY11"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter data untuk menghapus \"All natural disasters\"\n",
        "filtered_dfEntity = dfEntity[dfEntity[\"Entity\"] != \"All natural disasters\"]\n",
        "\n",
        "# Bar plot horizontal untuk \"Total Natural Disasters\" berdasarkan entitas (tanpa \"All natural disasters\")\n",
        "plt.figure(figsize=(10, 6))\n",
        "bars = plt.barh(filtered_dfEntity[\"Entity\"], filtered_dfEntity[\"Total Reported Disasters\"], color='skyblue')\n",
        "plt.ylabel(\"Entity\")\n",
        "plt.xlabel(\"Total Natural Disasters\")\n",
        "plt.title(\"Total Natural Disasters by Entity (1900-2018)\")\n",
        "\n",
        "# Menambahkan teks total di samping setiap bar\n",
        "for bar, total in zip(bars, filtered_dfEntity[\"Total Reported Disasters\"]):\n",
        "    plt.text(total + 5, bar.get_y() + bar.get_height() / 2, str(total), va='center', fontsize=9)\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 370
        },
        "id": "8yQTMo88MtL0",
        "outputId": "4f0eec77-946a-46bb-9dda-ab56f6664d1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dari hasil bar plot di atas, kita dapat melihat bahwa entitas \"Flood\" memiliki jumlah kejadian terbanyak, diikuti oleh \"Extreme Weather\" dan \"Earthquake.\" Ini menunjukkan bahwa bencana alam seperti banjir, cuaca ekstrem, dan gempa bumi adalah bencana yang sering terjadi selama periode 1900 hingga 2018."
      ],
      "metadata": {
        "id": "YmcaC3ZKmSgM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Exploratory Data Analysis with Python - Bivariate Analysis"
      ],
      "metadata": {
        "id": "BF_xy4oKMe7x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.scatter(dfDisasterDamage[\"Number of Reported Disasters\"], dfDisasterDamage[\"Total Economic Damage\"], alpha=0.5)\n",
        "plt.xlabel(\"Number of Natural Disasters\")\n",
        "plt.ylabel(\"Economic Damage\")\n",
        "plt.title(\"Scatter Plot: Economic Damage vs. Number of Natural Disasters\")\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "8DQtrCjkPMT5",
        "outputId": "59599aba-879e-4282-ccbe-8bf22b7870ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dari hasil scatter plot di atas, terlihat bahwa:\n",
        "- Sebaran Data untuk \"Number of Natural Disasters\" banyak yang berkumpul di rentang 0 hingga sekitar 100. Hal ini menunjukkan bahwa sebagian besar tahun memiliki jumlah bencana alam yang relatif rendah.\n",
        "- Sebaran data untuk \"Economic Damage\" cenderung berkumpul di rentang 0 hingga sekitar 0.5. Namun, ada beberapa outlier yang mencapai hingga 3.5, menunjukkan adanya perbedaan besar dalam kerusakan ekonomi akibat bencana alam.\n",
        "- Terlihat bahwa ada tren positif antara \"Number of Natural Disasters\" dan \"Economic Damage.\" Artinya, semakin banyak bencana alam yang terjadi dalam suatu tahun, semakin tinggi kerusakan ekonomi yang diakibatkannya.\n",
        "- Outlier: Terdapat satu outlier dengan nilai \"Economic Damage\" yang jauh lebih tinggi (3.5) dibandingkan dengan sebagian besar data. Outlier ini mungkin merupakan tahun dengan bencana alam yang sangat merusak secara ekonomi."
      ],
      "metadata": {
        "id": "nKGD5YIMkE_R"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Supervised Learning - Regression - Simple Linear Regression"
      ],
      "metadata": {
        "id": "Kv-CL8vBnxkF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter the data for 'Extreme weather'\n",
        "dfDisasterDamageFiltered = dfDisasterDamage[dfDisasterDamage['Entity'] != 'All natural disasters']\n",
        "\n",
        "# Variabel independen (X) dan dependen (y)\n",
        "X = dfDisasterDamageFiltered['Year'].values.reshape(-1, 1)\n",
        "y = dfDisasterDamageFiltered['Number of Reported Disasters']\n",
        "\n",
        "# Bagi data menjadi data training dan data testing (80% pelatihan, 20% pengujian)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Inisialisasi model regresi linear\n",
        "model = LinearRegression()\n",
        "\n",
        "# Train model pada data training\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Melakukan prediksi pada data testing\n",
        "y_pred = model.predict(X_test)"
      ],
      "metadata": {
        "id": "Ewfin9zQrze7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Membuat grafik\n",
        "plt.scatter(X_test, y_test, color='blue', label='Actual Values')\n",
        "plt.plot(X_test, y_pred, color='red', linewidth=2, label='Linear Regression Prediction')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Number of Reported Disasters')\n",
        "plt.title('Linear Regression: Actual vs. Predicted Values for Extreme Weather')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Menampilkan persamaan regresi linear\n",
        "equation = f'Y = {model.coef_[0]:.2f} * X + {model.intercept_:.2f}'\n",
        "print('Persamaan regresi linear: ', equation)\n",
        "\n",
        "# Menghitung metrik evaluasi\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Menampilkan metrik evaluasi\n",
        "print(f'Mean Squared Error: {mse}')\n",
        "print(f'R-squared: {r2}')"
      ],
      "metadata": {
        "id": "O6HHCin77LN3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "outputId": "689974fc-4f7e-4218-d4cb-07452d9d67b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Persamaan regresi linear:  Y = 1.14 * X + -2208.52\n",
            "Mean Squared Error: 278.99039186030683\n",
            "R-squared: 0.7843248901199398\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menggunakan model regresi linear yang telah dilatih untuk memprediksi jumlah bencana yang dilaporkan untuk tahun baru\n",
        "new_year = 2023\n",
        "new_year = np.array([[new_year]])  # Ubah skalar menjadi matriks 2D\n",
        "predictions_new_year = model.predict(new_year)\n",
        "\n",
        "# Bulatkan hasil prediksi\n",
        "rounded_prediction = round(predictions_new_year[0])\n",
        "\n",
        "# Menampilkan prediksi yang dibulatkan untuk tahun baru\n",
        "print(f\"Tahun: {new_year.flatten()[0]}, Prediksi Bulat Jumlah Bencana 'Extreme Weather' yang Dilaporkan: {rounded_prediction}\")"
      ],
      "metadata": {
        "id": "K9wGugAqIP04",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5a397f44-59f5-49f2-f717-53dcdfac1312"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tahun: 2023, Prediksi Bulat Jumlah Bencana 'Extreme Weather' yang Dilaporkan: 106\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Part 5: Unsupervised Learning - K-Means Clustering"
      ],
      "metadata": {
        "id": "YcdFowckDImc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengambil data dari dfDekade\n",
        "dfDekade = dfDekade[[\"Avg Natural Disasters\", \"Total Economic Damage\"]]\n",
        "\n",
        "# Normalisasi data\n",
        "scaler = MinMaxScaler()\n",
        "data_normalized = scaler.fit_transform(dfDekade)\n",
        "\n",
        "# Menggunakan elbow method untuk menentukan jumlah cluster optimal\n",
        "def find_optimal_clusters(data):\n",
        "    distortions = []\n",
        "    K = range(1, 10)\n",
        "    for k in K:\n",
        "        kmeanModel = KMeans(n_clusters=k)\n",
        "        kmeanModel.fit(data)\n",
        "        distortions.append(kmeanModel.inertia_)\n",
        "\n",
        "    return distortions\n",
        "\n",
        "distortions = find_optimal_clusters(data_normalized)\n",
        "\n",
        "# Visualisasi hasil elbow method\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(range(1, 10), distortions, marker='o', linestyle='-', color='b')\n",
        "plt.title('Elbow Method for dfDekade')\n",
        "plt.xlabel('Number of clusters')\n",
        "plt.ylabel('Distortion')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "5rceq4hNDRu7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 857
        },
        "outputId": "0a4b594c-c1fe-4b18-e15a-9a421ebecfa9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Berdasarkan plot elbow, jumlah cluster yang dipilih adalah 4.\n",
        "# Menerapkan K-Means clustering dengan jumlah cluster yang dipilih\n",
        "n_clusters=3\n",
        "kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n",
        "\n",
        "# Melakukan clustering\n",
        "kmeans.fit(data_normalized)\n",
        "\n",
        "# Menambahkan label cluster ke DataFrame\n",
        "dfDekade[\"Cluster\"] = kmeans.labels_\n",
        "\n",
        "print(dfDekade)"
      ],
      "metadata": {
        "id": "EtOFhs37FLJZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "48bf4c49-9eca-4604-f7a9-dec2516f2521"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     Avg Natural Disasters  Total Economic Damage  Cluster\n",
            "0                     6.70           1.306750e+09        0\n",
            "1                     6.40           6.000000e+08        0\n",
            "2                     8.70           1.019230e+09        0\n",
            "3                    10.00           3.347000e+09        0\n",
            "4                    13.70           3.008700e+09        0\n",
            "..                     ...                    ...      ...\n",
            "107                   2.60           1.398500e+08        0\n",
            "108                   6.67           5.280994e+09        0\n",
            "109                  10.30           1.913324e+10        0\n",
            "110                  14.20           2.244247e+10        0\n",
            "111                   8.89           4.102922e+10        0\n",
            "\n",
            "[88 rows x 3 columns]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualisasi hasil clustering dengan 4 warna yang berbeda\n",
        "plt.figure(figsize=(8, 6))\n",
        "# Ganti warna sesuai dengan preferensi Anda, misalnya 'c', 'm', 'y', 'k' (cyan, magenta, yellow, black)\n",
        "colors = ['c', 'm', 'y', 'k']\n",
        "\n",
        "for i in range(n_clusters):\n",
        "    cluster_data = dfDekade[dfDekade[\"Cluster\"] == i]\n",
        "    plt.scatter(cluster_data[\"Avg Natural Disasters\"], cluster_data[\"Total Economic Damage\"], c=colors[i], label=f'Cluster {i+1}')\n",
        "\n",
        "plt.title('K-Means Clustering for dfDekade')\n",
        "plt.xlabel('Total Natural Disasters')\n",
        "plt.ylabel('Total Economic Damage')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "EE1gpaTnF12O",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 512
        },
        "outputId": "01374239-8033-4994-c2fc-bb3c2c61d40b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghitung rentang (minimum dan maksimum) setiap cluster\n",
        "cluster_ranges = []\n",
        "for cluster in range(n_clusters):\n",
        "    cluster_data = dfDekade[dfDekade[\"Cluster\"] == cluster]\n",
        "    min_values = cluster_data.min()\n",
        "    max_values = cluster_data.max()\n",
        "    cluster_ranges.append({\n",
        "        \"Cluster\": cluster,\n",
        "        \"Min Natural Disasters\": min_values[\"Avg Natural Disasters\"],\n",
        "        \"Max Natural Disasters\": max_values[\"Avg Natural Disasters\"],\n",
        "        \"Min Economic Damage\": min_values[\"Total Economic Damage\"],\n",
        "        \"Max Economic Damage\": max_values[\"Total Economic Damage\"]\n",
        "    })\n",
        "\n",
        "# Membuat DataFrame hasil rentang\n",
        "df_cluster_ranges = pd.DataFrame(cluster_ranges)\n",
        "\n",
        "# Menampilkan hasil rentang\n",
        "print(df_cluster_ranges)"
      ],
      "metadata": {
        "id": "K-gjvZFjISS_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "04eb278e-41fa-4162-b02c-a97025680174"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Cluster  Min Natural Disasters  Max Natural Disasters  Min Economic Damage  \\\n",
            "0        0                   1.00                   55.8         2.700000e+04   \n",
            "1        1                 257.70                  386.1         6.994295e+11   \n",
            "2        2                  25.33                  172.5         5.384570e+10   \n",
            "\n",
            "   Max Economic Damage  \n",
            "0         1.957252e+11  \n",
            "1         1.354015e+12  \n",
            "2         5.167628e+11  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Insight yang dapat ditarik dari hasil clustering di atas adalah sebagai berikut:\n",
        "- Cluster 0 memiliki rentang rendah hingga menengah untuk jumlah bencana alam dan kerusakan ekonomi. Meskipun jumlah bencana alam bervariasi, kerusakan ekonomi cenderung berada dalam rentang yang lebih terkendali.\n",
        "- Cluster 1 memiliki jumlah bencana alam dan kerusakan ekonomi yang tinggi. Rentang jumlah bencana alam dan kerusakan ekonomi pada cluster ini lebih besar dibandingkan dengan cluster lainnya.\n",
        "- Cluster 2 berada di antara Cluster 0 dan Cluster 1 dalam hal jumlah bencana alam dan kerusakan ekonomi. Rentangnya cukup bervariasi, menunjukkan tingkat keragaman yang sedang.\n"
      ],
      "metadata": {
        "id": "8SAnYl7nMNzX"
      }
    }
  ]
}